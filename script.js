document.addEventListener("DOMContentLoaded", () => {
  const menuToggle = document.getElementById("menuToggle");
  const menuClose = document.getElementById("menuClose");
  const sideMenu = document.getElementById("sideMenu");
  const overlay = document.getElementById("overlay");
  const mainListTitle = document.getElementById("mainListTitle");
  const gamesList = document.getElementById("gamesList");
  const gameModal = document.getElementById("gameModal");
  const modalTitle = document.getElementById("modalTitle");
  const modalDesc = document.getElementById("modalDesc");
  const modalDownload = document.getElementById("modalDownload");
  const modalIcon = document.getElementById("modalIcon");
  const loader = document.getElementById("loader");
  const searchInput = document.getElementById("searchInput");

  const menuItems = document.querySelectorAll(".menuItem");

  let gamesData = [];
  let appsData = [];
  let currentCategory = null; // "games" –∏–ª–∏ "apps"
  let isSearching = false;

  async function loadJSON(url) {
    try {
      const response = await fetch(url);
      if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ " + url);
      return await response.json();
    } catch (e) {
      console.error(e);
      return [];
    }
  }

  async function loadData() {
    loader.style.display = "flex";
    gamesData = await loadJSON("games.json");
    appsData = await loadJSON("apps.json");
    loader.style.display = "none";
  }

  function closeMenu() {
    sideMenu.classList.remove("open");
    overlay.classList.add("hidden");
  }

  function openModal(item) {
    modalTitle.textContent = `${item.name}${item.version ? ` ‚Äî Version ${item.version}` : ""}`;
    modalDesc.textContent = item.description || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è";
    modalIcon.src = item.icon || "";
    modalIcon.alt = item.name || "";
    modalDownload.href = item.download || "#";
    modalDownload.style.display = item.download ? "block" : "none";

    gameModal.classList.add("show");
    overlay.classList.remove("hidden");
  }

  window.closeModal = function () {
    gameModal.classList.remove("show");
    overlay.classList.add("hidden");
  };

  menuToggle.addEventListener("click", () => {
    sideMenu.classList.add("open");
    overlay.classList.remove("hidden");
  });

  menuClose.addEventListener("click", closeMenu);
  overlay.addEventListener("click", () => {
    closeMenu();
    closeModal();
  });

  menuItems.forEach((btn) => {
    btn.addEventListener("click", async () => {
      closeMenu();
      isSearching = false;
      searchInput.value = "";
      const type = btn.dataset.catalog;
      currentCategory = type;
      const items = type === "games" ? gamesData : appsData;
      mainListTitle.textContent = type === "games" ? "üéÆ –í—Å–µ –∏–≥—Ä—ã" : "üì± –í—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è";
      renderList(items);
    });
  });

  function renderList(items) {
    gamesList.innerHTML = "";
    if (!items.length) {
      gamesList.innerHTML = "<p class='text-center text-gray-400'>–ü—É—Å—Ç–æ</p>";
      return;
    }
    items.forEach((item, idx) => {
      const card = document.createElement("div");
      card.className = "flex gap-4 p-3 rounded-lg bg-[rgba(110,28,255,0.3)] cursor-pointer hover:bg-purple-700 transition";
      card.setAttribute("tabindex", "0");
      card.setAttribute("role", "button");
      card.setAttribute("aria-pressed", "false");

      card.innerHTML = `
        <img src="${item.icon}" alt="${item.name}" class="w-16 h-16 rounded-xl flex-shrink-0 object-cover" />
        <div class="flex flex-col justify-between">
          <h3 class="text-lg font-semibold">${item.name}${item.version ? ` ‚Äî ${item.version}` : ""}</h3>
          <p class="text-gray-300 text-sm line-clamp-2">${item.description || ""}</p>
        </div>
      `;
      card.addEventListener("click", () => openModal(item));
      card.addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          openModal(item);
        }
      });
      gamesList.appendChild(card);
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ–±–æ–∏–º —Å–ø–∏—Å–∫–∞–º
  function searchItems(query) {
    if (!query) {
      if (currentCategory) {
        renderList(currentCategory === "games" ? gamesData : appsData);
        mainListTitle.textContent = currentCategory === "games" ? "üéÆ –í—Å–µ –∏–≥—Ä—ã" : "üì± –í—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è";
      } else {
        gamesList.innerHTML = "<p class='text-center text-gray-400'>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫</p>";
        mainListTitle.textContent = "";
      }
      return;
    }

    const q = query.toLowerCase();
    // –ò—â–µ–º –≤ –∏–≥—Ä–∞—Ö –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö
    const results = [];

    gamesData.forEach(item => {
      if (item.name.toLowerCase().includes(q)) results.push({...item, _type:"game"});
    });
    appsData.forEach(item => {
      if (item.name.toLowerCase().includes(q)) results.push({...item, _type:"app"});
    });

    if (results.length) {
      mainListTitle.textContent = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: ${results.length} –Ω–∞–π–¥–µ–Ω–æ`;
      renderSearchResults(results);
    } else {
      mainListTitle.textContent = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
      gamesList.innerHTML = "<p class='text-center text-gray-400'>–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç.</p>";
    }
  }

  function renderSearchResults(results) {
    gamesList.innerHTML = "";
    results.forEach(item => {
      const card = document.createElement("div");
      card.className = "flex gap-4 p-3 rounded-lg bg-[rgba(110,28,255,0.3)] cursor-pointer hover:bg-purple-700 transition";
      card.setAttribute("tabindex", "0");
      card.setAttribute("role", "button");
      card.setAttribute("aria-pressed", "false");

      const labelEmoji = item._type === "game" ? "üéÆ" : "üì±";

      card.innerHTML = `
        <img src="${item.icon}" alt="${item.name}" class="w-16 h-16 rounded-xl flex-shrink-0 object-cover" />
        <div class="flex flex-col justify-between">
          <h3 class="text-lg font-semibold">${labelEmoji} ${item.name}${item.version ? ` ‚Äî ${item.version}` : ""}</h3>
          <p class="text-gray-300 text-sm line-clamp-2">${item.description || ""}</p>
        </div>
      `;

      card.addEventListener("click", () => openModal(item));
      card.addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          openModal(item);
        }
      });

      gamesList.appendChild(card);
    });
  }

  searchInput.addEventListener("input", (e) => {
    const query = e.target.value.trim();
    isSearching = !!query;
    if (isSearching) {
      // –ü—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      menuItems.forEach(btn => btn.disabled = true);
    } else {
      menuItems.forEach(btn => btn.disabled = false);
    }
    searchItems(query);
  });

  // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  loadData().then(() => {
    // –î–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–≥—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    currentCategory = "games";
    mainListTitle.textContent = "üéÆ –í—Å–µ –∏–≥—Ä—ã";
    renderList(gamesData);
  });
});
